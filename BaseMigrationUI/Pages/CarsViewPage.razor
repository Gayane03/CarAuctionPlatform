@attribute [Route(Route.Cars)]
@using SharedLibrary.Enum
@using SharedLibrary.RequestModels
@using SharedLibrary.ResponseModels
@inject NavigationManager navigationManager;
@inject ApiController apiController;
@inject ResponseMessageUtile responseMessageUtile;
@inject LocalStorageHelper localStorageHelper;
@inject ISnackbar Snackbar;
@layout CarLayout;

<style>
	.mud-object-fit-cover {
		object-fit: cover;
	}
</style>


	<MudText Typo="Typo.h3" Color="Color.Primary">@Title</MudText>
	<MudGrid>
		@if (IsLoaded && (cars == null || !cars.Any()))
		{
			<MudPaper Class="d-flex justify-center align-center p-2 mt-8" Square="true">
				<MudIcon Icon="fas fa-search" Size="Size.Large" Color="Color.Primary" />
				<MudText Typo="Typo.h5" Align="Align.Left" Class="mt-2" Color="Color.Error">
					No cars match the current filtering.
				</MudText>
				<MudButton Variant="Variant.Text" Color="Color.Primary" Class="mt-3" OnClick="ResetFilters">
					Reset Filters
				</MudButton>
			</MudPaper>
		}
		else if (IsLoaded)
		{
			@foreach (var car in cars)
			{
				<MudItem xs="12" sm="6" md="4" lg="4" xl="4">
					<MudCard Elevation="25" Class="rounded-lg">
						<MudCardMedia Image="@car.ImageUrl" Height="250" Class="mud-object-fit-cover rounded-t-lg">


						</MudCardMedia>


						<MudGrid Class="mt-1">
							<MudItem xs="8">
								<MudText Typo="Typo.h6" Class="mb-1">@car.Name</MudText>
							</MudItem>
							@if (favoriteCarIds != null)
							{
								<MudItem xs="4" Class="d-flex justify-end">
									<MudIconButton Icon="@(IsFavorite(car.Id) ? Icons.Material.Filled.Favorite : Icons.Material.Outlined.FavoriteBorder)"
												   OnClick="() => ToggleFavorite(car.Id)"
												   Color="@(IsFavorite(car.Id) ? Color.Error : Color.Default)" />
								</MudItem>
							}
						</MudGrid>
						<MudText Typo="Typo.body2" Class="mb-2">@car.Brand @car.Model (@car.Year)</MudText>
						<MudText Typo="Typo.body2" Class="mb-3" Style="height: 60px;  overflow: hidden; text-overflow: ellipsis;">@car.Description</MudText>

						<MudButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" OnClick="() => SelectCar(car.Id)">Select</MudButton>

					</MudCard>
				</MudItem>
			}
		}
	</MudGrid>






@code {
	
	[Parameter]
	public CarFiltrationRequest? CarFiltrationRequest { get; set; } = new();

	[Parameter]
	public bool ForFavoritePage { get; set; } = false;

	[Parameter]
	public string Title { get; set; } = "Cars List";

	private bool IsLoaded = false;

	private List<CarViewResponse> cars;


	List<int> favoriteCarIds;


	string token;

	private async Task ToggleFavorite(int carId)
	{
		var isFavorite = false;

		try
		{
			if (favoriteCarIds.Contains(carId))
			{
				favoriteCarIds.Remove(carId);
			}
			else
			{
				favoriteCarIds.Add(carId);
				isFavorite = true;
			}

			var response = await apiController.ChangeCarFavoriteState(token, new CarFavoriteRequest() { CarId = carId, IsFavorite = isFavorite });
			await RefreshCars();
		}
		catch (Exception)
		{
			Snackbar.Add("Please contact with support team", MudBlazor.Severity.Error);
		}

	}

	private bool IsFavorite(int carId)
	{
		return favoriteCarIds != null && favoriteCarIds.Contains(carId);
	}


	


	public async Task RefreshCars()
	{
		try
		{
			var result = await apiController.GetCarsView(token, CarFiltrationRequest);

			cars = await responseMessageUtile.HandleResponse<List<CarViewResponse>>(result);
			if (cars is not null && cars.Any())
			{
				favoriteCarIds = cars.Where(cars => cars.IsFavorite).Select(car => car.Id).ToList();
			}
			if (ForFavoritePage)
			{
			
				cars = cars.Where(cars => cars.IsFavorite).ToList();
			}
		}
		catch (Exception ex)
		{
			Snackbar.Add(ex.Message, MudBlazor.Severity.Normal);
		
		}

	}

	public async Task ResetFilters()
	{
		CarFiltrationRequest = null;
		await RefreshCars();
	}

	protected override async Task OnInitializedAsync()
	{

		try
		{
			token = await GetAccessToken();
			Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;

			await RefreshCars();
		
		}
		catch (Exception ex)
		{
			Snackbar.Add("Please contact with support team", MudBlazor.Severity.Error);
		}
		IsLoaded = true;
	}


	private async Task<string> GetAccessToken()
	{
		try
		{
			return await localStorageHelper.GetToken(TokenStorageName.UserAccess);
		}
		catch (SystemException ex)
		{
			Snackbar.Add(ex.Message, MudBlazor.Severity.Error);
		}
		catch (Exception ex)
		{
			Snackbar.Add("Please contact with support team", MudBlazor.Severity.Error);
		}

		return null;
	}

	private async Task SelectCar(int carId)
	{
		
		var id = carId;
		navigationManager.NavigateTo($"/car/{id}");

	}

	

	
}